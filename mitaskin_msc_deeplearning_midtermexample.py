# -*- coding: utf-8 -*-
"""mitaskin-msc-deeplearning-midtermexample.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/mitaskin/afa9d7bbe4cee0487ad248355ccf4077/mitaskin-msc-deeplearning-midtermexample.ipynb

# Introduction
 Work for Deep Learning lesson. 
* Muhammed ikbal TAŞKIN
* Kahramanmaraş Sütçü İmam University
* 2022 November
* Reference
  * Oğuzhan GÜRBÜZ

# **Setup DataSet**

##Downlading MNIST Dataset

* Download the **MNIST** Dataset. 
* We loaded data some in train and validation 
* from this link *https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz*
---

> train_img --> reference for handwriting image (28x28 pixel).

> train_labels --> reference for image to which numbers
"""

from keras.datasets import mnist
(train_img, train_labels) = mnist.load_data()[0]
(test_img, test_labels) = mnist.load_data()[1]

"""## Verification of Data

*Shape of Train Images:  ( Total Image Count, X_Pixel, Y_Pixel)

*Shape of Test Images:  ( Total Image Count, X_Pixel, Y_Pixel)
"""

print("Shape of Train Images: ",train_img.shape)
print("Shape of Test Images: ",test_img.shape)

"""## Print a random image

*   Import Matlab Plot for graph drawing
*   plt.imgshow(image_src, cmap='gray_r')
  * gray_r --> for inverse gray scale
  * gray.  --> for non-inverse gray scale
"""

import matplotlib.pyplot as plt

plt.imshow(train_img[8], cmap='gray_r')
plt.show()

"""## Print Raw Matrix Data

The meaning of some values.

* "%3s" --> print three spaces
* %i --> print values
* end=' ' --> add a space at the end of print
"""

for row in train_img[8]:
    for i in row:
        print("%3s "%i, end='')
    print()

"""## Print Collective images"""

import numpy as np

n, k, figsize = 10, 10, (10, 10)
fig, ax = plt.subplots(n, k, figsize=figsize)
for i in range(n):
    for j in range(k):
        ax[i,j].imshow(train_img[np.random.randint(train_img.shape[0])], cmap='gray_r')
        ax[i,j].axis('off')

plt.show()

"""## Convert The Values To Decimal"""

train_img = train_img.reshape((60000,28*28))
train_img = train_img.astype("float32")/255

test_img = test_img.reshape((10000,28*28))
test_img = test_img.astype("float32")/255

"""## Encode Tags Categorically"""

from tensorflow.keras.utils import to_categorical

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

"""---

# **Create Network**

## Import Keras Library

*   We create a two-layers network
*   If you wish you can increase the number of layer and 
*   compare succes of layer with other different activation function.
"""

from keras import models
from keras import layers

model = models.Sequential()
model.add(layers.Dense(512,activation="relu", input_shape=(28*28,)))
model.add(layers.Dense(10,activation="softmax"))

model.compile(optimizer="rmsprop",
              loss="categorical_crossentropy",
              metrics=["accuracy"])

"""## Train Model"""

history = model.fit(train_img,
                    train_labels,
                    epochs=10,
                    batch_size=128)

history_dict = history.history
print("Keys: ",history_dict.keys())

import matplotlib.pyplot as plt

epochs = range(1,11)
loss = history_dict['loss']
accuracy = history_dict['accuracy']

plt.plot(epochs,loss)
plt.title("Loss")
plt.xlabel("Epochs")
plt.ylabel("Eğitim Kaybı")
plt.show()

plt.plot(epochs,accuracy)
plt.title("Accu")
plt.xlabel("Epochs")
plt.ylabel("Eğitim Başarımı")
plt.show()

test_loss, test_acc = model.evaluate(test_img,test_labels)
print("Test Loss: ",test_loss)
print("Test Accuracy: ",test_acc)